{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to SimpleSelfhostAuth This documentation should you help to get started quick and easy. What is SimpleSelfhostAuth? SimpleSelfhostAuth (SSA) is like Authelia , but (in my opinion) simpler to set up. Quickstart Head over to Quickstart Features Simple Isn't very resource-intensive Bug-free 1 Supports 2FA (TOTP) Easy to deploy via docker The backend is written with Rust \u21a9","title":"Welcome to SimpleSelfhostAuth"},{"location":"#welcome-to-simpleselfhostauth","text":"This documentation should you help to get started quick and easy.","title":"Welcome to SimpleSelfhostAuth"},{"location":"#what-is-simpleselfhostauth","text":"SimpleSelfhostAuth (SSA) is like Authelia , but (in my opinion) simpler to set up.","title":"What is SimpleSelfhostAuth?"},{"location":"#quickstart","text":"Head over to Quickstart","title":"Quickstart"},{"location":"#features","text":"Simple Isn't very resource-intensive Bug-free 1 Supports 2FA (TOTP) Easy to deploy via docker The backend is written with Rust \u21a9","title":"Features"},{"location":"homer-example/","text":"Homer-Example At first, you'll need docker and nginx installed. We'll have the following domain as a placeholder: my-stuff.home and our goal is that homer should be secureley available at homer.my-stuff.home ! 1: Setup Homer Create a new directory and create a file called docker-compose.yml with the following content: version : \"2\" services : homer : image : b4bz/homer #To build from source, comment previous line and uncomment below #build: . container_name : homer volumes : - ./assets:/www/assets ports : - 8081:8080 environment : - INIT_ASSETS=1 # default Start the stack with docker compose up -d You should be able to access homer now at my-stuff.home:8081 2: Setup SSA Create a new directory and run the following command to download the docker-compose.yml and generate a secret: wget -q docker-compose.yml https://raw.githubusercontent.com/mawoka-myblock/SimpleSelfhostAuth/master/docker-compose.yml ; sed -i \"s/NOT_SECRET/ $( openssl rand -hex 32 ) /g\" docker-compose.yml Next, start the containers: docker compose up -d and visit SSA: my-stuff.home:8080 . You can log in with the username and password admin . At first, change your password by clicking the \"Change Password\"-button. After that, go into the \"Admin\"-tab and there into the Apps-tab and click on \"Create App\". Enter a name and an optional description for the app. You don't have to change the \"Token Lifetime\"but you'll have to add a domain who it is described in the picture. Now, click on the blue \"Create\"-button. Note: if the app isn't in the list, refresh the page. 3: Setup Nginx Create a new Nginx-config-file: server { listen 80 ; server_name homer.my-stuff.home ; types_hash_max_size 1024 ; location / { proxy_pass http://localhost:8081 ; # URL of Homer # SSA-Start auth_request /auth ; # auth_request_set $auth_cookie $upstream_http_set_cookie ; add_header Set-Cookie $auth_cookie ; error_page 401 = @proxy_signin ; # auth_request_set $auth_cookie $upstream_http_set_cookie ; add_header Set-Cookie $auth_cookie ; # SSA-End } location = /auth { internal ; proxy_pass http://localhost:8080 ; # URL of SSA proxy_pass_request_body off ; proxy_set_header Content-Length \"\" ; proxy_set_header X-Original-URI $request_uri ; proxy_set_header X-Original-Remote-Addr $remote_addr ; proxy_set_header X-Original-Host $host ; } location /account { # proxy_pass http://localhost:8080 ; # URL of SSA proxy_set_header X-Original-URI $request_uri ; proxy_set_header X-Original-Remote-Addr $remote_addr ; proxy_set_header X-Original-Host $host ; } location @proxy_signin { # internal ; add_header Set-Cookie $auth_cookie ; return 302 /account/login?return_to= $request_uri ; } } That's it! Go to homer.my-stuff.home and sign in with your credentials!","title":"Homer-Example"},{"location":"homer-example/#homer-example","text":"At first, you'll need docker and nginx installed. We'll have the following domain as a placeholder: my-stuff.home and our goal is that homer should be secureley available at homer.my-stuff.home !","title":"Homer-Example"},{"location":"homer-example/#1-setup-homer","text":"Create a new directory and create a file called docker-compose.yml with the following content: version : \"2\" services : homer : image : b4bz/homer #To build from source, comment previous line and uncomment below #build: . container_name : homer volumes : - ./assets:/www/assets ports : - 8081:8080 environment : - INIT_ASSETS=1 # default Start the stack with docker compose up -d You should be able to access homer now at my-stuff.home:8081","title":"1: Setup Homer"},{"location":"homer-example/#2-setup-ssa","text":"Create a new directory and run the following command to download the docker-compose.yml and generate a secret: wget -q docker-compose.yml https://raw.githubusercontent.com/mawoka-myblock/SimpleSelfhostAuth/master/docker-compose.yml ; sed -i \"s/NOT_SECRET/ $( openssl rand -hex 32 ) /g\" docker-compose.yml Next, start the containers: docker compose up -d and visit SSA: my-stuff.home:8080 . You can log in with the username and password admin . At first, change your password by clicking the \"Change Password\"-button. After that, go into the \"Admin\"-tab and there into the Apps-tab and click on \"Create App\". Enter a name and an optional description for the app. You don't have to change the \"Token Lifetime\"but you'll have to add a domain who it is described in the picture. Now, click on the blue \"Create\"-button. Note: if the app isn't in the list, refresh the page.","title":"2: Setup SSA"},{"location":"homer-example/#3-setup-nginx","text":"Create a new Nginx-config-file: server { listen 80 ; server_name homer.my-stuff.home ; types_hash_max_size 1024 ; location / { proxy_pass http://localhost:8081 ; # URL of Homer # SSA-Start auth_request /auth ; # auth_request_set $auth_cookie $upstream_http_set_cookie ; add_header Set-Cookie $auth_cookie ; error_page 401 = @proxy_signin ; # auth_request_set $auth_cookie $upstream_http_set_cookie ; add_header Set-Cookie $auth_cookie ; # SSA-End } location = /auth { internal ; proxy_pass http://localhost:8080 ; # URL of SSA proxy_pass_request_body off ; proxy_set_header Content-Length \"\" ; proxy_set_header X-Original-URI $request_uri ; proxy_set_header X-Original-Remote-Addr $remote_addr ; proxy_set_header X-Original-Host $host ; } location /account { # proxy_pass http://localhost:8080 ; # URL of SSA proxy_set_header X-Original-URI $request_uri ; proxy_set_header X-Original-Remote-Addr $remote_addr ; proxy_set_header X-Original-Host $host ; } location @proxy_signin { # internal ; add_header Set-Cookie $auth_cookie ; return 302 /account/login?return_to= $request_uri ; } } That's it! Go to homer.my-stuff.home and sign in with your credentials!","title":"3: Setup Nginx"},{"location":"quickstart/","text":"Quick Start Warning Since SSA is in early development, expect breaking changes! Requirements A supported reverse proxy. Have a look at the list of reverse proxies Docker ( -compose ) A public domain (+ HTTPS) Download and install Create a new directory and enter it: mkdir SimpleSelfhostAuth && cd SimpleSelfhostAuth Next, download the docker-compose.yml : wget -q docker-compose.yml https://raw.githubusercontent.com/mawoka-myblock/SimpleSelfhostAuth/master/docker-compose.yml Add a secret key by running sed -i \"s/NOT_SECRET/$(openssl rand -hex 32)/g\" docker-compose.yml . Start the stack: docker compose up -d (or, if you use the old docker-compose: docker compose up -d ) Now, open the admin-interface at <YOUR_SSA_DOMAIN> and sign in. The username is admin and the password is the same as the username. CHANGE YOUR PASSWORD! Create users, apps, etc.","title":"Quick Start"},{"location":"quickstart/#quick-start","text":"Warning Since SSA is in early development, expect breaking changes!","title":"Quick Start"},{"location":"quickstart/#requirements","text":"A supported reverse proxy. Have a look at the list of reverse proxies Docker ( -compose ) A public domain (+ HTTPS)","title":"Requirements"},{"location":"quickstart/#download-and-install","text":"Create a new directory and enter it: mkdir SimpleSelfhostAuth && cd SimpleSelfhostAuth Next, download the docker-compose.yml : wget -q docker-compose.yml https://raw.githubusercontent.com/mawoka-myblock/SimpleSelfhostAuth/master/docker-compose.yml Add a secret key by running sed -i \"s/NOT_SECRET/$(openssl rand -hex 32)/g\" docker-compose.yml . Start the stack: docker compose up -d (or, if you use the old docker-compose: docker compose up -d ) Now, open the admin-interface at <YOUR_SSA_DOMAIN> and sign in. The username is admin and the password is the same as the username. CHANGE YOUR PASSWORD! Create users, apps, etc.","title":"Download and install"},{"location":"reverse-proxy/","text":"Reverse Proxies You already know that SSA requires a reverse proxy. Most of the common reverse-proxies should be supported. Note Nginx is recommended. Nginx","title":"Reverse Proxies"},{"location":"reverse-proxy/#reverse-proxies","text":"You already know that SSA requires a reverse proxy. Most of the common reverse-proxies should be supported. Note Nginx is recommended. Nginx","title":"Reverse Proxies"},{"location":"reverse-proxy/nginx/","text":"Nginx SSA works best with Nginx. Below is an example-nginx-config. The highlighted lines need extra attention. server { listen 80 ; server_name _ ; types_hash_max_size 1024 ; location / { root /usr/share/nginx/html ; # (1) index index.html index.htm ; # SSA-Start (2) auth_request /auth ; # (3) auth_request_set $auth_cookie $upstream_http_set_cookie ; add_header Set-Cookie $auth_cookie ; error_page 401 = @proxy_signin ; # (4) auth_request_set $auth_cookie $upstream_http_set_cookie ; add_header Set-Cookie $auth_cookie ; # SSA-End } location = /auth { internal ; proxy_pass http://localhost:8080 ; # (5) proxy_pass_request_body off ; proxy_set_header Content-Length \"\" ; proxy_set_header X-Original-URI $request_uri ; proxy_set_header X-Original-Remote-Addr $remote_addr ; proxy_set_header X-Original-Host $host ; } location /account { # (6) proxy_pass http://localhost:8080 ; # (7) proxy_set_header X-Original-URI $request_uri ; proxy_set_header X-Original-Remote-Addr $remote_addr ; proxy_set_header X-Original-Host $host ; } location @proxy_signin { # (8) internal ; add_header Set-Cookie $auth_cookie ; return 302 /account/login?return_to= $request_uri ; } } Add your normal stuff here. Here starts the configuration for SSA. You don't have to change anything here. That tells Nginx where it should check if the user is logged in. This line tells Nginx that the error-page for the code 401 (unauthorized) is another server-block. Replace it with the URL for SSA. This is the block which gets passed to SSA. You may not change the name (or the URL (/account/)). Replace it with the URL for SSA. This block is required.","title":"Nginx"},{"location":"reverse-proxy/nginx/#nginx","text":"SSA works best with Nginx. Below is an example-nginx-config. The highlighted lines need extra attention. server { listen 80 ; server_name _ ; types_hash_max_size 1024 ; location / { root /usr/share/nginx/html ; # (1) index index.html index.htm ; # SSA-Start (2) auth_request /auth ; # (3) auth_request_set $auth_cookie $upstream_http_set_cookie ; add_header Set-Cookie $auth_cookie ; error_page 401 = @proxy_signin ; # (4) auth_request_set $auth_cookie $upstream_http_set_cookie ; add_header Set-Cookie $auth_cookie ; # SSA-End } location = /auth { internal ; proxy_pass http://localhost:8080 ; # (5) proxy_pass_request_body off ; proxy_set_header Content-Length \"\" ; proxy_set_header X-Original-URI $request_uri ; proxy_set_header X-Original-Remote-Addr $remote_addr ; proxy_set_header X-Original-Host $host ; } location /account { # (6) proxy_pass http://localhost:8080 ; # (7) proxy_set_header X-Original-URI $request_uri ; proxy_set_header X-Original-Remote-Addr $remote_addr ; proxy_set_header X-Original-Host $host ; } location @proxy_signin { # (8) internal ; add_header Set-Cookie $auth_cookie ; return 302 /account/login?return_to= $request_uri ; } } Add your normal stuff here. Here starts the configuration for SSA. You don't have to change anything here. That tells Nginx where it should check if the user is logged in. This line tells Nginx that the error-page for the code 401 (unauthorized) is another server-block. Replace it with the URL for SSA. This is the block which gets passed to SSA. You may not change the name (or the URL (/account/)). Replace it with the URL for SSA. This block is required.","title":"Nginx"},{"location":"scopes/","text":"Scopes With scopes, you can control who has access to what. List of available scopes App With the app-scope you can give user access to a specific app. Usage <APP_NAME> should be replaced with the name of the app you want to grant access to. app:<APP_NAME> Domain With the domain-scope you can give user access to a specific domain. Usage <DOMAIN> should be replaced with the domain you want to grant access to. domain:<DOMAIN>","title":"Scopes"},{"location":"scopes/#scopes","text":"With scopes, you can control who has access to what.","title":"Scopes"},{"location":"scopes/#list-of-available-scopes","text":"","title":"List of available scopes"},{"location":"scopes/#app","text":"With the app-scope you can give user access to a specific app.","title":"App"},{"location":"scopes/#usage","text":"<APP_NAME> should be replaced with the name of the app you want to grant access to. app:<APP_NAME>","title":"Usage"},{"location":"scopes/#domain","text":"With the domain-scope you can give user access to a specific domain.","title":"Domain"},{"location":"scopes/#usage_1","text":"<DOMAIN> should be replaced with the domain you want to grant access to. domain:<DOMAIN>","title":"Usage"}]}